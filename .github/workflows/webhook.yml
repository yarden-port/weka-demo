name: Sync Port Entities via Webhook (Create/Update/Delete)

on:
  workflow_dispatch:

jobs:
  sync-port-webhook:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get Access Token
        id: get-token
        run: |
          token=$(curl -s -X POST 'https://api.getport.io/v1/auth/access_token' \
            -H 'Content-Type: application/json' \
            -d '{
              "clientId": "${{ secrets.PORT_CLIENT_ID }}",
              "clientSecret": "${{ secrets.PORT_CLIENT_SECRET }}"
            }' | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$token" >> $GITHUB_ENV

      - name: Sync Entities
        env:
          PORT_WEBHOOK_URL: https://ingest.getport.io/N29knvwPStVAcYnu
          PORT_ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          set -e

          echo "üîÑ Fetching desired entities from API..."
          #desired_json=$(curl -s "https://your.api/endpoint/json")
          desired_json=$(cat response_1743508042248.json)  # optional file fallback

          echo "üì• Fetching current Port entities..."
          current_json=$(curl -s -L "https://api.getport.io/v1/blueprints/block/entities" \
            -H "Authorization: Bearer $PORT_ACCESS_TOKEN" \
            -H "Accept: application/json")

          echo "$current_json" | jq -c '.entities[]' | jq -s 'map({(.identifier): .}) | add' > current_map.json

          echo "$desired_json" | jq -c '.[]' | while read -r block; do
            id=$(echo "$block" | jq -r '.system_id')
            checksum=$(echo "$block" | jq -S . | sha256sum | cut -d " " -f1)
            current_entity=$(jq -c --arg id "$id" '.[$id] // empty' current_map.json)

            if [ -z "$current_entity" ]; then
              op="create/update"
              echo "üÜï $id - creating"
            else
              old_checksum=$(echo "$current_entity" | jq '{body: .properties}' | jq -S . | sha256sum | cut -d " " -f1)
              if [ "$checksum" != "$old_checksum" ]; then
                op="create/update"
                echo "üîÅ $id - updating"
              else
                echo "‚úÖ $id - unchanged"
                continue
              fi
            fi

            # Add operation to body and send it
            updated_block=$(echo "$block" | jq --arg op "$op" '. + {operation: $op}')
            curl -s -X POST "$PORT_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "$updated_block"
          done

          echo "$desired_json" | jq -r '.[].system_id' > desired_ids.txt

          echo "$current_json" | jq -r '.entities[].identifier' | while read -r current_id; do
            if ! grep -Fxq "$current_id" desired_ids.txt; then
              echo "‚ùå $current_id not in desired state - sending delete"
              jq -n \
                --arg id "$current_id" \
                --arg op "delete" \
                '{
                  system_id: $id,
                  operation: $op
                }' | curl -s -X POST "$PORT_WEBHOOK_URL" \
                  -H "Content-Type: application/json" \
                  -d @-
            fi
          done
